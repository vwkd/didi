// Didi grammar in McKeeman Form extended with comments

program
    cw variables cw
    cw operations cw
    cw variables cw operations cw

variables
    variable
    variable cw variables

variable
    any_value cw "=" cw identifer

// beware: can have double repitition, once at definition and once on the identifier, engine must repeat whole definition when repeated a second time
// beware: can have circular definition when using identifiers in block, engine must check and throw error
any_value
    boolean_value_op
    integer_value
    no_match

boolean_value_op
    boolean
    boolean cw boolean_operator cw boolean_value_op

integer_value
    integer
    sequence

string_value_op
    string_value
    string_operator cw string_value

string_operator
    "-"
    "~"

string_value
    string
    block
    identifier

// note: recursion!
block
    "{" cw operations cw "}"

operations
    operation
    operation cw operations

operation
    progression
    maybe_progression

// TODO: better name
progression
    match
    no_match

match
    string_value_rep_named cw ";"

string_value_rep_named
    string_value_rep
    string_value_rep cw "@" identifier

no_match
    string_value_rep

string_value_rep
    string_value_op
    string_value_op cw repetition

repetition
    repetition_amount
    repetition_amount cw repetition_mode

repetition_amount
    integer_value
    identifier

repetition_mode
    "<"

maybe_progression
    conditions cw "?" cw progression

conditions
    condition
    condition cw boolean_operator cw conditions

boolean_operator
    "&"
    "|"

// beware: variable or block can contain `match`, but engine treats it as `no_match` since doesn't eat input string
// doesn't want to disallow since can reuse same variable for condition and for progression, e.g. `hasFoo & hasBar ? hasFoo`
// could disallow it just for block but would make grammar much more complicated
condition
    boolean_value_op
    no_match

boolean
    "true"
    "false"

integer
    digit
    nonzero_digit digits

digits
    digit
    digit digits

digit
    "0" . "9"

nonzero_digit
    "1" . "9"

sequence
    list
    range

list
    "[" cw elements cw "]"

elements
    integer
    integer cw elements

range
    ".."
    integer ".."
    ".." integer
    integer ".." integer

string
    '"' characters_dc '"'
    "'" characters_sc "'"
    "`" characters_bt "`"

characters_dc
    ""
    character_dc characters_dc

character_dc
    UNICODE_CHARACTER - '"'
    '\' '"'

characters_sc
    ""
    character_sc characters_sc

character_sc
    UNICODE_CHARACTER - "'"
    "\" "'"

characters_bt
    ""
    character_bt characters_bt

character_bt
    UNICODE_CHARACTER - "`"
    "\" "`"

// note: not empty, at least one
identifier
    first_char
    first_char chars

first_char
    letter
    "_"

chars
    char
    char chars

char
    letter
    digit
    "_"

letter
    'a' . 'z'
    'A' . 'Z'

cw
    whitespace
    whitespace comments whitespace

whitespace
    ""
    whitespace_char whitespace

whitespace_char
    UNICODE_WHITESPACE_CHARACTER

comments
    comment
    comment cw comments

comment
    "/*" comment_chars "*/"

// TODO: is this grammar correct?
// should not contain `/*` or `*/` together but can contain separately
comment_chars
    ""
    (comment_char comment_chars) - "/*" - "*/"

comment_char
    UNICODE_CHARACTERS
