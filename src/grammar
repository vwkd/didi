// Didi grammar in McKeeman Form extended with comments

Program
    cw
    cw Variables cw
    cw Expressions cw
    cw Variables cw Expressions cw

Variables
    Variable
    Variable cw Variables

Variable
    AnyValue cw "=" cw Identifier cw ";"

// beware: repetition can be declared twice, once when variable is defined and once when used
// engine repeats whole thing, i.e. repeats the already repeated
// beware: can have circular definition when using identifiers in block
// engine must check for circularity and throw error
AnyValue
    BooleanValue
    NumberValue
    Segment

BooleanValue
    Boolean
    Boolean cw BooleanOperator cw BooleanValue

NumberValue
    Integer
    Integers

StringValue
    StringCreator
    StringOperator cw StringCreator

StringOperator
    "-"
    "~"

StringCreator
    String
    Block
    Identifier

Block
    "{" cw Expressions cw "}"

Expressions
    Expression
    Expression cw Expressions

Expression
    Statement
    Conditional

// note: this eats the input string
Statement
    NonMatchedSegment
    Segment

NonMatchedSegment
    NamedSegment cw ";"

NamedSegment
    Segment
    Segment cw "@" Identifier

Segment
    StringValue
    StringValue cw Repetition

Repetition
    RepetitionAmount
    RepetitionAmount cw RepetitionMode

RepetitionAmount
    NumberValue
    Identifier

RepetitionMode
    "<"

Conditional
    Conditions cw "?" cw Statement

// note: this doesn't eat the input string
Conditions
    Condition
    Condition cw BooleanOperator cw Conditions

BooleanOperator
    "&"
    "|"

// beware: condition can have block that contains `NonMatchedSegment`es
// engine must treat as `Segment` since condition doesn't eat input string
// doesn't disallow since would make grammar much more complicated
// and if in variable couldn't reuse it for both condition and movement, e.g. `hasFoo & hasBar ? hasFoo`
Condition
    BooleanValue
    Segment

Boolean
    "true"
    "false"

Integer
    Digit
    NonZeroDigit Digits

Digits
    Digit
    Digit Digits

Digit
    "0" . "9"

NonZeroDigit
    "1" . "9"

Integers
    Sequence
    Range

Sequence
    "[" cw Elements cw "]"

Elements
    Integer
    Integer cw Elements

Range
    ".."
    Integer ".."
    ".." Integer
    Integer ".." Integer

String
    '"' NonDcChars '"'
    "'" NonScChars "'"
    "`" NonBtChars "`"

NonDcChars
    ""
    NonDcChar NonDcChars

NonDcChar
    AnyChar - '"'
    '\' '"'

NonScChars
    ""
    NonScChar NonScChars

NonScChar
    AnyChar - "'"
    "\" "'"

NonBtChars
    ""
    NonBtChar NonBtChars

NonBtChar
    AnyChar - "`"
    "\" "`"

AnyChar
    UNICODE_CHARACTER

// note: not empty, at least one
Identifier
    AlphabeticalChar
    AlphabeticalChar AlphanumericChars

AlphanumericChars
    AlphanumericChar
    AlphanumericChar AlphanumericChars

AlphabeticalChar
    Letter
    "_"

AlphanumericChar
    Letter
    Digit
    "_"

Letter
    'a' . 'z'
    'A' . 'Z'

cw
    Whitespace
    Whitespace Comments Whitespace

Whitespace
    ""
    WhitespaceChar Whitespace

WhitespaceChar
    UNICODE_WHITESPACE_CHARACTER

Comments
    Comment
    Comment cw Comments

Comment
    "/*" CommentChars "*/"

// TODO: is this correct?
// should not contain both characters together but can contain them separated
CommentChars
    ""
    (AnyChar CommentChars) - "/*" - "*/"
